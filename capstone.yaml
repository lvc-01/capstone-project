# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for serverless patterns workshop

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active

Parameters:
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators 
    Type: String
    Default: apiAdmins

Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub  ${AWS::StackName}-Users
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: S
      KeySchema:
        - AttributeName: userid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/users.lambda_handler
      Description: Handler for all users related operations
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Tags:
        Stack: !Sub "${AWS::StackName}"
      Events:
        GetUsersEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref RestAPI
        PutUserEvent:
          Type: Api
          Properties:
            Path: /users
            Method: put
            RestApiId: !Ref RestAPI
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: put
            RestApiId: !Ref RestAPI
        GetUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: get
            RestApiId: !Ref RestAPI
        DeleteUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: delete
            RestApiId: !Ref RestAPI

  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'
      MethodSettings:
        - ResourcePath: "/*"
          LoggingLevel: INFO
          HttpMethod: "*"
          DataTraceEnabled: True

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes: 
        - email
      Schema: 
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes: 
        - email
      UserPoolTags:
          Key: Name
          Value: !Sub ${AWS::StackName} User Pool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: 
        !Sub ${AWS::StackName}UserPoolClient
      ExplicitAuthFlows: 
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
      CallbackURLs:
        - 'http://localhost' 

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool

  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: !Ref UserPoolAdminGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool                 

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/authorizer.lambda_handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APPLICATION_CLIENT_ID: !Ref UserPoolClient
          ADMIN_GROUP_NAME: !Ref UserPoolAdminGroupName
      Tags:
        Stack: !Sub "${AWS::StackName}"

  #Bookings table
  BookingsTable:
  Type: AWS::DynamoDB::Table
  Properties:
    TableName: Bookings
    AttributeDefinitions:
      - AttributeName: BookingId
        AttributeType: S
      - AttributeName: UnitId
        AttributeType: S
      - AttributeName: UserId
        AttributeType: S
      - AttributeName: RentalStartDate
        AttributeType: S
      - AttributeName: RentalEndDate
        AttributeType: S
      - AttributeName: PaymentMethod
        AttributeType: S
      - AttributeName: BillingOption
        AttributeType: S
    KeySchema:
      - AttributeName: BookingId
        KeyType: HASH
    BillingMode: PAY_PER_REQUEST
    GlobalSecondaryIndexes:
      - IndexName: UnitIndex
        KeySchema:
          - AttributeName: UnitId
            KeyType: HASH
        Projection:
          ProjectionType: ALL
    
  #Storage Unit table
  StorageUnitsTable:
  Type: AWS::DynamoDB::Table
  Properties:
    TableName: StorageUnits
    AttributeDefinitions:
      - AttributeName: UnitId
        AttributeType: S
      - AttributeName: Status
        AttributeType: S
      - AttributeName: UnitSize
        AttributeType: S
    KeySchema:
      - AttributeName: UnitId
        KeyType: HASH
    BillingMode: PAY_PER_REQUEST
    GlobalSecondaryIndexes:
      - IndexName: StatusIndex
        KeySchema:
          - AttributeName: Status
            KeyType: HASH
        Projection:
          ProjectionType: ALL


  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev


  # Browse Units Lambda
  BrowseUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: lambdas/browse_units/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: StorageUnitsTable
      Events:
        BrowseUnitsApi:
          Type: Api
          Properties:
            Path: /browseUnits
            Method: GET
            RestApiId: !Ref ApiGateway

  # Book Unit Lambda
  BookUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: lambdas/book_unit/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: BookingsTable
      Events:
        BookUnitApi:
          Type: Api
          Properties:
            Path: /bookUnit
            Method: POST
            RestApiId: !Ref ApiGateway

  # Unlock Unit Lambda
  UnlockUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: lambdas/unlock_unit/
      Policies:
        - DynamoDBReadPolicy:
            TableName: UsersTable
      Events:
        UnlockUnitApi:
          Type: Api
          Properties:
            Path: /unlockUnit
            Method: POST
            RestApiId: !Ref ApiGateway

  # Cancel Unit Lambda
  CancelUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: lambdas/cancel_unit/
      Policies:
        - DynamoDBReadPolicy:
            TableName: UsersTable
      Events:
        UnlockUnitApi:
          Type: Api
          Properties:
            Path: /cancelUnit
            Method: POST
            RestApiId: !Ref ApiGateway

  # Get Unit Lambda
  GetUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: lambdas/get_unit/
      Policies:
        - DynamoDBReadPolicy:
            TableName: UsersTable
      Events:
        UnlockUnitApi:
          Type: Api
          Properties:
            Path: /getUnit
            Method: POST
            RestApiId: !Ref ApiGateway
      
  # Send notification Lambda
  GetUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: lambdas/send_notification/
      Policies:
        - DynamoDBReadPolicy:
            TableName: UsersTable
      Events:
        UnlockUnitApi:
          Type: Api
          Properties:
            Path: /sendNotification
            Method: POST
            RestApiId: !Ref ApiGateway
  
 

Outputs:
  UsersTable:
    Description: DynamoDB Users table
    Value: !Ref UsersTable

  UsersFunction:
    Description: "Lambda function used to perform actions on the users data"
    Value: !Ref UsersFunction

  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  UserPool:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient

  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value: !Ref UserPoolAdminGroupName
    
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub 'https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost'

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value: !Sub 'aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id ${UserPoolClient} --auth-parameters USERNAME=<username>,PASSWORD=<password>'
  
  ApiGatewayEndpoint:
    Description: URL for the API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/"
    Export:
      Name: ApiGatewayEndpoint

  BrowseUnitsFunctionName:
    Description: Browse Units Lambda Function Name
    Value: !Ref BrowseUnitsFunction
    Export:
      Name: BrowseUnitsFunctionName

  BookUnitFunctionName:
    Description: Book Unit Lambda Function Name
    Value: !Ref BookUnitFunction
    Export:
      Name: BookUnitFunctionName

  UnlockUnitFunctionName:
    Description: Unlock Unit Lambda Function Name
    Value: !Ref UnlockUnitFunction
    Export:
      Name: UnlockUnitFunctionName

  CancelUnitFunctionName:
    Description: Cancel Unit Lambda Function Name
    Value: !Ref CancelUnitFunction
    Export:
      Name: CancelUnitFunctionName

  GetUnitFunctionName:
    Description: Get Unit Lambda Function Name
    Value: !Ref GetUnitFunction
    Export:
      Name: GetUnitFunctionName

  SendNotificationFunctionName:
    Description: Send Notification Lambda Function Name
    Value: !Ref SendNotificationFunction
    Export:
      Name: SendNotificationFunctionName


 